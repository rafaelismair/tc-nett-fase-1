name: CI - Build & Test .NET 8

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v3

    - name: 🧰 Instalar .NET 8 Preview
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: 🧾 Verificar versão instalada
      run: dotnet --info

    - name: 🔁 Restaurar pacotes
      run: dotnet restore Fiap.CloudGames.Fase1.sln

    - name: 🛠️ Build do projeto
      run: dotnet build Fiap.CloudGames.Fase1.sln --configuration Release --no-restore

    - name: 🧪 Executar testes (Release)
      run: |
        dotnet test Fiap.CloudGames.Fase1.Tests/Fiap.CloudGames.Fase1.Tests.csproj \
          --configuration Release \
          --no-restore \
          --no-build \
          --verbosity normal
  deploy:
    name: 🚀 Deploy para Azure Web App
    runs-on: ubuntu-latest
    needs: build-and-test

    env:
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
      IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}
      DOCKERFILE_PATH: ${{ secrets.DOCKERFILE_PATH }}
      WEBAPP_NAME: ${{ secrets.WEBAPP_NAME }}

    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🐳 Login no Azure Container Registry (ACR)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 🏗️ Build e Push da imagem para o ACR
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        push: true
        tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest

    - name: 🚀 Atualizar Web App para nova imagem
      run: |
        az webapp config container set \
          --name ${{ env.WEBAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --docker-custom-image-name ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_REPOSITORY }}:latest \
          --docker-registry-server-url https://${{ env.CONTAINER_REGISTRY }}


